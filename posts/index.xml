<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on RoninRo&#39;s Blog</title>
    <link>https://roninro.github.io/posts/</link>
    <description>Recent content in Posts on RoninRo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 10 Mar 2023 16:41:38 +0800</lastBuildDate><atom:link href="https://roninro.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>书单 2023</title>
      <link>https://roninro.github.io/posts/2023/book-list/</link>
      <pubDate>Fri, 10 Mar 2023 16:41:38 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2023/book-list/</guid>
      <description>置身世内 - 兰小欢 反战之战 大问题：简明哲学论 一九八四 蛤蟆先生去看心理医生 悉达多 中国是部金融史</description>
    </item>
    
    <item>
      <title>Shadowsocks-Rust 简介</title>
      <link>https://roninro.github.io/posts/2021/ss-rust/</link>
      <pubDate>Fri, 27 Aug 2021 15:54:29 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2021/ss-rust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Add Tailwind Css to Svelte</title>
      <link>https://roninro.github.io/posts/2021/add-tailwind-css-to-svelte/</link>
      <pubDate>Sat, 08 May 2021 09:36:35 +0000</pubDate>
      
      <guid>https://roninro.github.io/posts/2021/add-tailwind-css-to-svelte/</guid>
      <description>SvelteKit 目前是 beta 版本，本文可能只适用于 SvelteKit v1.0.0-next.102 首先我们用 SvelteKit 新建一个项目1npm init svelte@next my-app 2cd my-app 3npm install 4npm run dev -- --open 为项目添加 @sveltejs/adapter-static 适配器以支持编译静态网页。1npm i</description>
    </item>
    
    <item>
      <title>[Vim] 快速对齐插件 vim-easy-align</title>
      <link>https://roninro.github.io/posts/2021/vim-easy-align/</link>
      <pubDate>Tue, 30 Mar 2021 10:59:51 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2021/vim-easy-align/</guid>
      <description>vim-easy-align 是一款简单易用的 Vim 对齐插件。 安装并添加配置： 1&amp;#34; in .vimrc 2Plug &amp;#39;junegunn/vim-easy-align&amp;#39; 3 4&amp;#34; Start interactive EasyAlign in visual mode (e.g. vipga) 5xmap ga &amp;lt;Plug&amp;gt;(EasyAlign) 6 7&amp;#34; Start interactive EasyAlign for a motion/text object (e.g. gaip) 8nmap ga &amp;lt;Plug&amp;gt;(EasyAlign) 用法： vipga= vip 多行选中 ga 进入 EasyAlign 模式</description>
    </item>
    
    <item>
      <title>[整理] 五笔基础</title>
      <link>https://roninro.github.io/posts/2021/wubu/</link>
      <pubDate>Mon, 29 Mar 2021 10:23:25 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2021/wubu/</guid>
      <description>概述“五笔” 原意是也指五种基本笔画：横、竖、撇、捺（点）、折，任何一个汉字，也都是由这五种基本笔画及其衍生字根组成，通过使用一定的映射规则，</description>
    </item>
    
    <item>
      <title>[Vim] 使用 YouCompleteMe 对 Rust/Golang 代码补全</title>
      <link>https://roninro.github.io/posts/2021/vimrc/</link>
      <pubDate>Fri, 22 Jan 2021 18:07:01 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2021/vimrc/</guid>
      <description>YouCompleteMe 是 Vim 下的自动补全插件。自从 Vim8 与 YouCompleteMe 支持异步 IO 后，在 Vim 下的使用体验也是直线上升。 使用 YouCompleteMe 有几个先决条件，不然可能会不能正常使用： Ycm 依赖于 Pyth</description>
    </item>
    
    <item>
      <title>Zabbix 监控 Postgres 和 Redis</title>
      <link>https://roninro.github.io/posts/2020/zabbix-agent/</link>
      <pubDate>Fri, 28 Feb 2020 14:22:13 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2020/zabbix-agent/</guid>
      <description>非教程贴，布署完成后的回忆记录。 Zabbix Agent 布署机器： CentOS 7+ Zabbix Server 版本： 4.4.4 安装 Zabbix Agent 。Step1 添加 Zabbix 的存储库不同版本的 Zabbix 存储库地址可以在 https://www.zabbix.com/cn/download 。找到 1CentOS/RHEL 7: 2rpm -Uvh</description>
    </item>
    
    <item>
      <title>Mac 为 Linux 交叉编译 Rust 程序</title>
      <link>https://roninro.github.io/posts/2019/rust-cross-compile/</link>
      <pubDate>Fri, 27 Dec 2019 11:27:32 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/rust-cross-compile/</guid>
      <description>&lt;p&gt;默认情况下，Rust 将静态链接所有 Rust 代码。但是，如果使用标准库，它将动态链接到系统的 &lt;code&gt;libc&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如何想要 100% 静态二进制文件。可以使用 &lt;code&gt;MUSL libc&lt;/code&gt; 提供的 Linux-based 支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[PIN] Linux 下常用命令</title>
      <link>https://roninro.github.io/posts/2019/linux-cmd/</link>
      <pubDate>Thu, 05 Dec 2019 15:27:30 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/linux-cmd/</guid>
      <description>tar命令选项： 1-z(gzip) 用 gzip 来压缩/解压缩文件 2-j(bzip2) 用 bzip2 来压缩/解压缩文件 3-v(verbose) 详细报告 tar 处理的文件信息 4-c(create) 创建新的档案文件 5-x(extract) 解压缩文件或目录 6-f(file) 使用档案文件</description>
    </item>
    
    <item>
      <title>Vim 分割窗口</title>
      <link>https://roninro.github.io/posts/2019/vim-split/</link>
      <pubDate>Thu, 24 Oct 2019 14:02:30 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/vim-split/</guid>
      <description>在操作 Vim 窗口之前，最好了解下面几个概念： 缓冲区（buffer）是加载到内存中进行编辑的文件，原始文件在将缓冲区写到文件中之前保持不变。 窗口（</description>
    </item>
    
    <item>
      <title>[转]当我开始做软件开发时，最希望听到的七条建议</title>
      <link>https://roninro.github.io/posts/2020/gergelyorosz-advice/</link>
      <pubDate>Tue, 16 Jul 2019 16:18:37 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2020/gergelyorosz-advice/</guid>
      <description>Uber 工程师 Gergely Orosz 近日在 Twitter 上发出如题的7条建议（twitter： GergelyOrosz ） 当我开始从事软件工程的时候，我最希望自己听到以下七条建议： 每年花点时间读一两本</description>
    </item>
    
    <item>
      <title>Notes About Debian</title>
      <link>https://roninro.github.io/posts/2019/debian/</link>
      <pubDate>Wed, 29 May 2019 13:33:48 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/debian/</guid>
      <description>&lt;h2 id=&#34;debian-镜像更换&#34;&gt;Debian 镜像更换&lt;a class=&#34;anchorjs-link&#34; href=&#34;#debian-%e9%95%9c%e5%83%8f%e6%9b%b4%e6%8d%a2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Debian 的软件源配置文件是 &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; 。将系统的镜像做个备份，然后将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 高级教程：用 MVVM 处理复杂的TableView</title>
      <link>https://roninro.github.io/posts/2019/ios-mvvm-tableview/</link>
      <pubDate>Thu, 16 May 2019 10:15:54 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/ios-mvvm-tableview/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://flawlessapp.io/blog/advanced-mvvm-tableview-tutorial/#viewmodel&#34; target=&#34;_blank&#34;&gt;Advanced iOS tutorial: Use MVVM to tackle complicated TableView&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在本文，我们将讨论如何 用 Model-View-ViewModel(MVVM) 模式来组织 table view 代码。
MVVM 是一种架构模型，它使用数据模型表示视图状态。我们可以使用很多 Swift 技术， 使 UI 逻辑包装成数据模型。例如使用协议和闭包简化 table view 中的代码。建议查看 &lt;a href=&#34;https://medium.com/flawless-app-stories/how-to-use-a-model-view-viewmodel-architecture-for-ios-46963c67be1b&#34; target=&#34;_blank&#34;&gt;文章&lt;/a&gt; 以全面了解 MVVM 模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git-flow 工作流程</title>
      <link>https://roninro.github.io/posts/2019/git-flow/</link>
      <pubDate>Fri, 19 Apr 2019 11:37:38 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/git-flow/</guid>
      <description>当我们选择 Git 作为版本控制系统时，使用一个统一的工作流程是非常重要的。 Git 在分支控制上面做得非常好，但是如果团队在开发中没有使用有效的工作流程，</description>
    </item>
    
    <item>
      <title>入手了一部 Kindle</title>
      <link>https://roninro.github.io/posts/2019/kindle-oasis2/</link>
      <pubDate>Tue, 26 Feb 2019 16:17:05 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/kindle-oasis2/</guid>
      <description>&lt;p&gt;年后终于入手的 Kindle Oasis 2 。&lt;/p&gt;
&lt;p&gt;平时喜欢用手机看看书，但是长时间盯着手机屏幕，眼睛却是有些不舒服。偶然间，在商场的数码体验店，把玩了一下 Kindle Oasis 2，一下也就喜欢上了这款机子。轻薄的机身，纸质书一般的质感，最重要的是，墨水屏远没有手机屏幕对眼睛的刺激大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>访问 iCloud 云盘文件</title>
      <link>https://roninro.github.io/posts/2019/ios-document-picker/</link>
      <pubDate>Fri, 11 Jan 2019 15:11:29 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2019/ios-document-picker/</guid>
      <description>前段时间，客户提出了一个需求，希望可以像微信一个从云盘中选择文件发送。 还好苹果提供了 UIDocumentPickerViewController 这个控制器，可以让我们很方便的达成这个目的。 添加对 iCloud 的</description>
    </item>
    
    <item>
      <title>Go 1.11 新特性：Go Modules</title>
      <link>https://roninro.github.io/posts/2018/go-moudle/</link>
      <pubDate>Sun, 09 Sep 2018 19:49:47 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/go-moudle/</guid>
      <description>&lt;p&gt;Go 1.11 为 &lt;em&gt;modules&lt;/em&gt; 带来了实验性支持，这是Go的一个新的依赖管理系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift 中的GCD </title>
      <link>https://roninro.github.io/posts/2018/gcd-swift/</link>
      <pubDate>Sat, 19 May 2018 10:39:55 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/gcd-swift/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;内容主要翻译自：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/148513/grand-central-dispatch-tutorial-swift-3-part-1&#34; target=&#34;_blank&#34;&gt;Grand Central Dispatch Tutorial for Swift 3: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raywenderlich.com/148515/grand-central-dispatch-tutorial-swift-3-part-2&#34; target=&#34;_blank&#34;&gt;Grand Central Dispatch Tutorial for Swft 3: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Grand Central Dispatch(GCD) 是管理并发操作的低级API，GCD 可以通过将计算量大的任务推迟到后台从而提高应用的响应速度。与锁和线程相比，它是一个更简单的并发模型。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gem: 使用 --user-install 时的问题</title>
      <link>https://roninro.github.io/posts/2018/gem-install--user-install/</link>
      <pubDate>Tue, 15 May 2018 19:54:45 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/gem-install--user-install/</guid>
      <description>&lt;p&gt;在较新的 MacOS 系统中， 使用 &lt;code&gt;gem install&lt;/code&gt; 安装模块时，会由于权限问题而失败。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;--user-install&lt;/code&gt; 选项时，RubyGems会将gem 安装用户的主目录中，如&lt;code&gt;~/.gem/ruby/1.9.1&lt;/code&gt; 。
为了能够正常调用我们安装的命令，所以我们需要将 &lt;code&gt;~/.gem/ruby/1.9.1/bin&lt;/code&gt; 添加到PATH环境变量中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; which ruby &amp;gt;/dev/null &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; which gem &amp;gt;/dev/null; &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;ruby -r rubygems -e &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;puts Gem.user_dir&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/bin:&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PATH&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将上面的代码加入 &lt;code&gt;~/.bashrc&lt;/code&gt;  (bash) 或者 &lt;code&gt;~/.zprofile&lt;/code&gt;  (zsh) 中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MVVM in Swift</title>
      <link>https://roninro.github.io/posts/2018/mvvm-in-swift/</link>
      <pubDate>Tue, 08 May 2018 11:16:59 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/mvvm-in-swift/</guid>
      <description>原文：MVVM in Swift 编程归结起来就是让代码以一种聪明的方式与其他代码进行通信。 软件模式是约束程序员使编程更容易的方法。 MVVM , 大致上有以下几种限制</description>
    </item>
    
    <item>
      <title>Git Submodule</title>
      <link>https://roninro.github.io/posts/2018/git-submodule/</link>
      <pubDate>Mon, 30 Apr 2018 14:17:55 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/git-submodule/</guid>
      <description>&lt;p&gt;&lt;code&gt;Submodule&lt;/code&gt; 允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift 闭包</title>
      <link>https://roninro.github.io/posts/2018/swift-closures/</link>
      <pubDate>Thu, 15 Mar 2018 09:33:53 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/swift-closures/</guid>
      <description>根据 The Swift Programming Language (Swift 4.1) - Closures 整理。 Swift 中闭包与 Objective-C 中的 Blocks 以及其他一些编程语言中的匿名函数比较相似，是自包含的函数代码块。 闭包可以捕获和存储其所在上下文中</description>
    </item>
    
    <item>
      <title>使用 Automator 为文件夹添加一个快捷操作</title>
      <link>https://roninro.github.io/posts/2018/sublime-mac-menu/</link>
      <pubDate>Tue, 06 Mar 2018 16:48:30 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2018/sublime-mac-menu/</guid>
      <description>在 Mac 下，文件夹的默认菜单选项是不支持在其它应用中打开，只能先打开应用，然后选择目标文件夹。 以 Sublime Text 为例，如何使用 Automator 快速为文件夹添加一个菜单选项</description>
    </item>
    
    <item>
      <title>在Vim中使用fzf</title>
      <link>https://roninro.github.io/posts/2017/fzf-in-vim/</link>
      <pubDate>Sun, 24 Dec 2017 08:54:07 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/fzf-in-vim/</guid>
      <description>fzf 是一个基于Go实现的一个交互式的命令行搜索工具，可以搜索如：文件，历史命令，git提交等。功能非常强大。 基于FZF实现的vim插件，让我们</description>
    </item>
    
    <item>
      <title>Neovim 下配置 golang 开发环境</title>
      <link>https://roninro.github.io/posts/2017/golang-in-vim/</link>
      <pubDate>Tue, 19 Dec 2017 11:07:07 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/golang-in-vim/</guid>
      <description>golang 开发者在Vim 上贡献了许多成熟的插件。站在巨人的肩膀上，我们可以非常轻松的在Vim 下配置出属于自己的golang的开发环境。 电脑环境： Mac 10.13</description>
    </item>
    
    <item>
      <title>配置SSH登入远程Linux</title>
      <link>https://roninro.github.io/posts/2017/linux-ssh/</link>
      <pubDate>Mon, 10 Jul 2017 10:12:02 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/linux-ssh/</guid>
      <description>所谓公钥登录，就是用户将自己的公钥储存在远程主机上。登录的时候远程主机回向用户发送一段随机字符串，用户用自己的秘钥加密后再发送给远程主机。远</description>
    </item>
    
    <item>
      <title>关于Vim不能正常显示中文的解决方法</title>
      <link>https://roninro.github.io/posts/2017/linux-vimrc/</link>
      <pubDate>Mon, 10 Jul 2017 10:04:03 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/linux-vimrc/</guid>
      <description>&lt;p&gt;这类问题一般都是由于编码问题导致的。在 ~/.vimrc 添加如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;fileencodings&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;utf-8,gb2312,gbk,gb18030  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;termencoding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;utf-8  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;fileformats&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;unix  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;encoding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;prc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存退出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KVO &amp; KVOController</title>
      <link>https://roninro.github.io/posts/2017/ios-kvocontroller/</link>
      <pubDate>Fri, 30 Jun 2017 11:08:26 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/ios-kvocontroller/</guid>
      <description>KVO的实现机制KVO 是 Objective-C 对观察者模式的实现。从苹果的 文档 中对于它的实现描述可以知道： KVO 是通过 isa-swizzling 实现的。 当你观察一个对象时，该对象的isa指</description>
    </item>
    
    <item>
      <title>Carthage 的简单使用</title>
      <link>https://roninro.github.io/posts/2017/ios-carthage/</link>
      <pubDate>Mon, 19 Jun 2017 20:57:37 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/ios-carthage/</guid>
      <description>Carthage 是和 Cocoapods 类似的第三方库管理工具。和 Cocoapods 相比，Carthage 仅导入 framework 文件，做到更少的入侵性。但是Carthage 仅支持动态框架，只支持iOS 8</description>
    </item>
    
    <item>
      <title>Hugo 主题 Gemini</title>
      <link>https://roninro.github.io/posts/2017/gemini-theme/</link>
      <pubDate>Mon, 05 Jun 2017 14:12:20 +0800</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/gemini-theme/</guid>
      <description>最近在https://www.linpx.com/上看到了博主的博客主题，感觉很漂亮，不过是Typecho 主题的。于是便用了周末的时间将它转</description>
    </item>
    
    <item>
      <title>Objective-C Messaging</title>
      <link>https://roninro.github.io/posts/2017/runtime-messaging/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/runtime-messaging/</guid>
      <description>消息传递（Messaging）在C语言中，调用一个方法其实就是跳转到内存中的某一点，并开始执行一段代码。没有动态特性特性，因为这个是在编译时</description>
    </item>
    
    <item>
      <title>读:《Objective-C高级编程》之GCD</title>
      <link>https://roninro.github.io/posts/2017/objc-gcd/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://roninro.github.io/posts/2017/objc-gcd/</guid>
      <description>什么是GCD Grand Central Dispatch(GCD)是异步执任务的技术之一。一般将应用程序中记述的线程管理用的代码在系统级中实现。开发只需要定义想执行</description>
    </item>
    
    <item>
      <title>Swift:Automatic Reference Counting in Swift</title>
      <link>https://roninro.github.io/posts/2016/arc-in-swift/</link>
      <pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://roninro.github.io/posts/2016/arc-in-swift/</guid>
      <description>原文地址：Automatic Reference Counting 翻译： https://www.cnswift.org/ Swift 使用自动引用计数*(ARC)*机制来追踪和管理你的APP的内存使用。在大多数情况下，这意味着内存管</description>
    </item>
    
    <item>
      <title>iOS:关于iOS的推送</title>
      <link>https://roninro.github.io/posts/2016/ios-remotenotification/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://roninro.github.io/posts/2016/ios-remotenotification/</guid>
      <description>苹果的在iOS 10 中将通知相关的API统一成了UserNotifications.framework。在新的UserNotifications</description>
    </item>
    
  </channel>
</rss>
