<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on RoninRo's Blog</title><link>https://fninit.com/categories/technology/</link><description>Recent content in Tech on RoninRo's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 18 Sep 2021 11:34:04 +0800</lastBuildDate><atom:link href="https://fninit.com/categories/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>[Go] 添加 Github Webhook</title><link>https://fninit.com/posts/2021/github-webhook/</link><pubDate>Sat, 18 Sep 2021 11:34:04 +0800</pubDate><guid>https://fninit.com/posts/2021/github-webhook/</guid><description>Github 支持为指定的仓库添加 Webhook 。借助 go-github 库可以快速实现一个 Webhook Server 。 首先为仓库添加 Webhooks 配置： Setting - Webhooks - Add webhook : 在 Payload URL 下填写服务器接口地址，Content type 选择</description></item><item><title>Add Tailwind Css to Svelte</title><link>https://fninit.com/posts/2021/add-tailwind-css-to-svelte/</link><pubDate>Sat, 08 May 2021 09:36:35 +0000</pubDate><guid>https://fninit.com/posts/2021/add-tailwind-css-to-svelte/</guid><description>SvelteKit 目前是 beta 版本，本文可能只适用于 SvelteKit v1.0.0-next.102 首先我们用 SvelteKit 新建一个项目1npm init svelte@next my-app 2cd my-app 3npm install 4npm run dev -- --open 为项目添加 @sveltejs/adapter-static 适配器以支持编译静态网页。1npm i</description></item><item><title>Zabbix 监控 Postgres 和 Redis</title><link>https://fninit.com/posts/2020/zabbix-agent/</link><pubDate>Fri, 28 Feb 2020 14:22:13 +0800</pubDate><guid>https://fninit.com/posts/2020/zabbix-agent/</guid><description>非教程贴，布署完成后的回忆记录。 Zabbix Agent 布署机器： CentOS 7+ Zabbix Server 版本： 4.4.4 安装 Zabbix Agent 。Step1 添加 Zabbix 的存储库不同版本的 Zabbix 存储库地址可以在 https://www.zabbix.com/cn/download 。找到 1CentOS/RHEL 7: 2rpm -Uvh</description></item><item><title>git-flow 工作流程</title><link>https://fninit.com/posts/2019/git-flow/</link><pubDate>Fri, 19 Apr 2019 11:37:38 +0800</pubDate><guid>https://fninit.com/posts/2019/git-flow/</guid><description>当我们选择 Git 作为版本控制系统时，使用一个统一的工作流程是非常重要的。 Git 在分支控制上面做得非常好，但是如果团队在开发中没有使用有效的工作流程，</description></item><item><title>Gem: 使用 --user-install 时的问题</title><link>https://fninit.com/posts/2018/gem-install--user-install/</link><pubDate>Tue, 15 May 2018 19:54:45 +0800</pubDate><guid>https://fninit.com/posts/2018/gem-install--user-install/</guid><description>&lt;p>在较新的 MacOS 系统中， 使用 &lt;code>gem install&lt;/code> 安装模块时，会由于权限问题而失败。&lt;/p>
&lt;p>当使用 &lt;code>--user-install&lt;/code> 选项时，RubyGems会将gem 安装用户的主目录中，如&lt;code>~/.gem/ruby/1.9.1&lt;/code> 。
为了能够正常调用我们安装的命令，所以我们需要将 &lt;code>~/.gem/ruby/1.9.1/bin&lt;/code> 添加到PATH环境变量中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> which ruby &amp;gt;/dev/null &lt;span style="color:#ff79c6">&amp;amp;&amp;amp;&lt;/span> which gem &amp;gt;/dev/null; &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#8be9fd;font-style:italic">PATH&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>ruby -r rubygems -e &lt;span style="color:#f1fa8c">&amp;#39;puts Gem.user_dir&amp;#39;&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span>&lt;span style="color:#f1fa8c">/bin:&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">$PATH&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将上面的代码加入 &lt;code>~/.bashrc&lt;/code> (bash) 或者 &lt;code>~/.zprofile&lt;/code> (zsh) 中。&lt;/p></description></item><item><title>Git Submodule</title><link>https://fninit.com/posts/2018/git-submodule/</link><pubDate>Mon, 30 Apr 2018 14:17:55 +0800</pubDate><guid>https://fninit.com/posts/2018/git-submodule/</guid><description>&lt;p>&lt;code>Submodule&lt;/code> 允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。&lt;/p></description></item><item><title>在Vim中使用fzf</title><link>https://fninit.com/posts/2017/fzf-in-vim/</link><pubDate>Sun, 24 Dec 2017 08:54:07 +0800</pubDate><guid>https://fninit.com/posts/2017/fzf-in-vim/</guid><description>fzf 是一个基于Go实现的一个交互式的命令行搜索工具，可以搜索如：文件，历史命令，git提交等。功能非常强大。 基于FZF实现的vim插件，让我们</description></item><item><title>Hugo 主题 Gemini</title><link>https://fninit.com/posts/2017/gemini-theme/</link><pubDate>Mon, 05 Jun 2017 14:12:20 +0800</pubDate><guid>https://fninit.com/posts/2017/gemini-theme/</guid><description>最近在https://www.linpx.com/上看到了博主的博客主题，感觉很漂亮，不过是Typecho 主题的。于是便用了周末的时间将它转</description></item></channel></rss>