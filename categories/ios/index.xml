<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iOS on RoninRo's Blog</title><link>https://fninit.com/categories/ios/</link><description>Recent content in iOS on RoninRo's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 16 May 2019 10:15:54 +0800</lastBuildDate><atom:link href="https://fninit.com/categories/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>iOS 高级教程：用 MVVM 处理复杂的TableView</title><link>https://fninit.com/posts/2019/ios-mvvm-tableview/</link><pubDate>Thu, 16 May 2019 10:15:54 +0800</pubDate><guid>https://fninit.com/posts/2019/ios-mvvm-tableview/</guid><description>&lt;blockquote>
&lt;p>原文：&lt;a href="https://flawlessapp.io/blog/advanced-mvvm-tableview-tutorial/#viewmodel">Advanced iOS tutorial: Use MVVM to tackle complicated TableView&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在本文，我们将讨论如何 用 Model-View-ViewModel(MVVM) 模式来组织 table view 代码。
MVVM 是一种架构模型，它使用数据模型表示视图状态。我们可以使用很多 Swift 技术， 使 UI 逻辑包装成数据模型。例如使用协议和闭包简化 table view 中的代码。建议查看 &lt;a href="https://medium.com/flawless-app-stories/how-to-use-a-model-view-viewmodel-architecture-for-ios-46963c67be1b">文章&lt;/a> 以全面了解 MVVM 模式。&lt;/p></description></item><item><title>访问 iCloud 云盘文件</title><link>https://fninit.com/posts/2019/ios-document-picker/</link><pubDate>Fri, 11 Jan 2019 15:11:29 +0800</pubDate><guid>https://fninit.com/posts/2019/ios-document-picker/</guid><description>前段时间，客户提出了一个需求，希望可以像微信一个从云盘中选择文件发送。 还好苹果提供了 UIDocumentPickerViewController 这个控制器，可以让我们很方便的达成这个目的。 添加对 iCloud 的</description></item><item><title>MVVM in Swift</title><link>https://fninit.com/posts/2018/mvvm-in-swift/</link><pubDate>Tue, 08 May 2018 11:16:59 +0800</pubDate><guid>https://fninit.com/posts/2018/mvvm-in-swift/</guid><description>原文：MVVM in Swift 编程归结起来就是让代码以一种聪明的方式与其他代码进行通信。 软件模式是约束程序员使编程更容易的方法。 MVVM , 大致上有以下几种限制</description></item><item><title>KVO &amp; KVOController</title><link>https://fninit.com/posts/2017/ios-kvocontroller/</link><pubDate>Fri, 30 Jun 2017 11:08:26 +0800</pubDate><guid>https://fninit.com/posts/2017/ios-kvocontroller/</guid><description>KVO的实现机制KVO 是 Objective-C 对观察者模式的实现。从苹果的 文档 中对于它的实现描述可以知道： KVO 是通过 isa-swizzling 实现的。 当你观察一个对象时，该对象的isa指</description></item><item><title>Carthage 的简单使用</title><link>https://fninit.com/posts/2017/ios-carthage/</link><pubDate>Mon, 19 Jun 2017 20:57:37 +0800</pubDate><guid>https://fninit.com/posts/2017/ios-carthage/</guid><description>Carthage 是和 Cocoapods 类似的第三方库管理工具。和 Cocoapods 相比，Carthage 仅导入 framework 文件，做到更少的入侵性。但是Carthage 仅支持动态框架，只支持iOS 8</description></item><item><title>Objective-C Messaging</title><link>https://fninit.com/posts/2017/runtime-messaging/</link><pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate><guid>https://fninit.com/posts/2017/runtime-messaging/</guid><description>消息传递（Messaging）在C语言中，调用一个方法其实就是跳转到内存中的某一点，并开始执行一段代码。没有动态特性特性，因为这个是在编译时</description></item><item><title>读:《Objective-C高级编程》之GCD</title><link>https://fninit.com/posts/2017/objc-gcd/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://fninit.com/posts/2017/objc-gcd/</guid><description>什么是GCD Grand Central Dispatch(GCD)是异步执任务的技术之一。一般将应用程序中记述的线程管理用的代码在系统级中实现。开发只需要定义想执行</description></item><item><title>iOS:关于iOS的推送</title><link>https://fninit.com/posts/2016/ios-remotenotification/</link><pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate><guid>https://fninit.com/posts/2016/ios-remotenotification/</guid><description>苹果的在iOS 10 中将通知相关的API统一成了UserNotifications.framework。在新的UserNotifications</description></item></channel></rss>